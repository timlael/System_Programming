head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	2015.05.02.17.28.15;	author tmlz5d;	state Exp;
branches;
next	1.3;

1.3
date	2015.04.29.19.45.58;	author tmlz5d;	state Exp;
branches;
next	1.2;

1.2
date	2015.04.28.14.32.16;	author tmlz5d;	state Exp;
branches;
next	1.1;

1.1
date	2015.04.20.21.01.11;	author tmlz5d;	state Exp;
branches;
next	;


desc
@shell example
@


1.4
log
@sig handler prototype altered
@
text
@#include "sh.h"
#define MAX 512
#define SIGCTD 30

void handle_ctd(int sig){
	if (sig==SIGCTD){
		printf("\nCtrl+D encountered... Exiting\n");
	}
	exit(1);
}

int getcmd (char *s, char *buf){
	int c, count;
	signal(SIGCTD, handle_ctd);
	
	printf ("%s ", s); 						/* print prompt*/
	for (count=0; ( c = getchar() ) != EOF; ++count){
		buf [count] = c;
		if (count >= MAX){ 					/* line too long */
			printf ("\n---Input line too long! Please start again.\n");
			count = -1;     				/* clear command line buffer */
			continue;       				/* go to start of for loop */
		}                 					/* end if input line too long */ 
		if ( c == '\n' ){  					/* end of input line */
			buf [count] = NULL;  				/* terminate input string */
			return (count);       				/* return command line */
		}
			                       				/* end if command line done */
	} 								/* end for loop, exiting here means EOF was entered */
	if (c == EOF){
		raise (SIGCTD);
	}
	printf ("\n");
	return (0); 
}									/* end getcmd */

int runcmd (char *cmd){ 
	char *p; 							/* storage for part of command line */
	char *argv[MAX+1] = {NULL}; 					/* arguments of command line (up to 513) */
	int pid; 							/* pid of forked process to execute command line */
	int rc;                                     			/* return code */
	int status; 							/* status of exited child process */
	int argc; 							/* the number of arguments */
	int type = 1; 							/* 1 = foreground, 0 = background */

	if (strcasecmp(cmd, "exit") == 0) {				/* case insensitive search for exit command */
		printf("Exit encountered... Exiting\n");
		exit(EXIT_SUCCESS);
	}
	else {
		for (; *cmd == ' ' || *cmd == '\t'; ++cmd); 			/* ignore leading spaces */
		for (p=cmd; *p; ++p)
  			if (*p == '&'){
    			type = 0;  						/* this is a background process */
    			break; 							/* exit for loop */
			}  							/* end if and for loops, searching for a & */

/* parse the command line into tokens */
		for (argc = 0; *cmd; ++cmd, ++argc){
			p = argv [argc] = (char *) malloc (MAX);		/* create space for argument */
  			while (*cmd != ' ' && *cmd != '\t'){ 			/* get next token */
				if (*cmd == NULL){
					--cmd;
					break; 					/* leave while loop */
				}						/* end if end of line */
			*p = *cmd; 						/* move character from command line to argument */
			++p;    						/* next character in argument */
			++cmd;  						/* next character in command line */
			}							/* end of while statement */
    		*p = NULL; 							/* finish off argument string with NULL */
		} 								/* end for loop, parsed tokens to arguments */

/* ready to run the command */
		pid = fork();  							/* create a child process to run the command */
	
		if (pid < 0){
			printf ("fork failed.\n");
			exit (1);  						/* Failure condition */
		} 								/* end if fork failed */
		
		if (pid == 0){							/* in child process */
			execvp (*argv, argv);
			exit (0);
		} 								/* end if in child process */

/* in parent process */
		if (!type){ 							/* test to see if in background */
			printf ("Child process ID: [%d]\n", pid); 		/* report child process ID */
			return 0;
		} 								/* end if in background */

/* if foreground, wait for child to return */
		while ( ( rc = wait (&status) ) != pid )
		if ( rc == -1) break; 						/* child process crashed */
		return ( rc = -1 ? -1 : status );
	}
}	 
/* end runcmd */ 

@


1.3
log
@added functionality and signal handlers
@
text
@d3 1
a3 1
#define SIGMINE 30
d5 3
a7 6
void handle_int(int sig){
	if (sig==SIGMINE){
		printf("\nCtrl-D encountered... Exiting\n");
	}
	if (sig==SIGINT){
		signal(SIGINT, SIG_IGN);
d14 1
a14 4
	signal(SIGINT, handle_int);
	signal(SIGMINE, handle_int);
	
	printf ("%s ", s); 						/* print prompt */
d16 1
d23 1
a23 1
		}                 					/* end if input line too long */
d31 1
a31 1
		raise (SIGMINE);
d46 1
a46 1
	if (strcmp(cmd, "exit") == 0) {
d78 1
a78 1
			exit (1);  						/* this is a real problem, and I am not going to take it! */
d80 1
d83 1
a83 1
			exit (0); 						/* you are not supposed to get here */
@


1.2
log
@laid out internals of sh()
@
text
@a0 11
#include <stdio.h>
#include <string.h>
#include <strings.h>
#include <limits.h>
#include <unistd.h>
#include <stdlib.h>
#include <pwd.h>
#include <dirent.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <signal.h>
d2 2
d5 27
a31 58
int sh( int argc, char **argv, char **envp ){

	char *prompt = calloc(PROMPTMAX, sizeof(char));
	char *commandline = calloc(MAX_CANON, sizeof(char));
	char *command, *arg, *commandpath, *p, *pwd, *owd;
	char **args = calloc(MAXARGS, sizeof(char*));
	int uid, i, status, argsct, go = 1;
	struct passwd *password_entry;
	char *homedir;
	struct pathelement *pathlist;

  	uid = getuid();
	password_entry = getpwuid(uid);               	/* get passwd info */
	homedir = password_entry->pw_dir;				/* Home directory to start out with*/
     
		if ( (pwd = getcwd(NULL, PATH_MAX+1)) == NULL ){
			perror("getcwd");
			exit(2);
		}

	owd = calloc(strlen(pwd) + 1, sizeof(char));
	memcpy(owd, pwd, strlen(pwd));
	prompt[0] = ' '; prompt[1] = '\0';

/* Put PATH into a linked list */
	pathlist = get_path();

		while (1){
			printf(">>> ");								/* Print Prompt */
			strcpy(cmd, "");							/* get command line and process */
			gets(cmd);		

			if (strcmp(cmd, "func1") == 0) {			/* check for each built in command and implement */
				func1();
				continue;
			}
			else if (strcmp(cmd, "func2") == 0) {
				func2();
				continue;
			}
			else if (strcmp(cmd, "func3") == 0) {
				func3();
			}
			else if (strcmp(cmd, "func4") == 0) {
				func4();
			}
			else {
				fprintf(stderr, "%s: Command not found.\n", args[0]);
				continue;
			}

			pid = fork();      
			if (pid == 0){								/* child */
				execve(command, arg, envp);
			}
			else {										/* parent */
				waitpid(pid, NULL, WNOHANG);
			}
d33 70
a102 23
	return 0;
)
 

/* sh() */

char *which(char *command, struct pathelement *pathlist )
{
   /* loop through pathlist until finding command and return it.  Return
   NULL when not found. */

} /* which() */

char *where(char *command, struct pathelement *pathlist )
{
  /* similarly loop through finding all locations of command */
} /* where() */

void list ( char *dir )
{
  /* see man page for opendir() and readdir() and print out filenames for
  the directory passed */
} /* list() */
@


1.1
log
@Initial revision
@
text
@d14 14
a27 15
int sh( int argc, char **argv, char **envp )
{
  char *prompt = calloc(PROMPTMAX, sizeof(char));
  char *commandline = calloc(MAX_CANON, sizeof(char));
  char *command, *arg, *commandpath, *p, *pwd, *owd;
  char **args = calloc(MAXARGS, sizeof(char*));
  int uid, i, status, argsct, go = 1;
  struct passwd *password_entry;
  char *homedir;
  struct pathelement *pathlist;

  uid = getuid();
  password_entry = getpwuid(uid);               /* get passwd info */
  homedir = password_entry->pw_dir;		/* Home directory to start
						  out with*/
d29 49
a77 31
  if ( (pwd = getcwd(NULL, PATH_MAX+1)) == NULL )
  {
    perror("getcwd");
    exit(2);
  }
  owd = calloc(strlen(pwd) + 1, sizeof(char));
  memcpy(owd, pwd, strlen(pwd));
  prompt[0] = ' '; prompt[1] = '\0';

  /* Put PATH into a linked list */
  pathlist = get_path();

  while ( go )
  {
    /* print your prompt */

    /* get command line and process */

    /* check for each built in command and implement */

     /*  else  program to exec */
    {
       /* find it */
       /* do fork(), execve() and waitpid() */

      //else
        fprintf(stderr, "%s: Command not found.\n", args[0]);
    }
  }
  return 0;
} /* sh() */
@
